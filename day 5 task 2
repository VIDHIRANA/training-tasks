/* Write a program to print all the possible combinations according to the input values.
Example :
Given Values
'1' : ['Z', 'Y', 'A'],
'2' : ['B', 'O'],
'12' : ['L']
'3' : ['U', 'P']

Input : 123
Output : [ZBU, ZBP, ZOU, ZOP, YBU, YBP, YOU, YOP, ABU, ABP, AOU, AOP, LU, LP]*/

#include <bits/stdc++.h>
using namespace std;

// Function to find all possible combinations 
void combinations(vector<char> storedValue[],
					int input[], string res, int currPos, int n)
{
	// If processed every digit of key, print result
	if (currPos == n) {
		cout << res << " ";
		return;
	}

	// Stores current digit
	int digit = input[currPos];

	// Size of the list corresponding to current digit
	int len = storedValue[digit].size();

	// One by one replace the digit with each character in the
	// corresponding list and recur for next digit
	for (int i = 0; i < len; i++) {
	
      combinations(storedValue, input, res + storedValue[digit][i], currPos + 1, n);
	}
}

// Driver Code
int main()
{

	vector<char> storedValue[] =
	{
		{'Q','R'}, 
  	{'V','D'},	 
  	{ 'Z', 'Y', 'B' },
		{ 'K', 'G', 'f' },
		{ 'V', 'I', 'D' },
		{ 'R', 'A', 'A' },
		{ 'S', 'A', 'H' },
		{ 'P', 'Q', 'S', 'T'},
		{ 'V', 'X' },
		{ 'L'},
    {'U', 'L', 'G'},
    {'V', 'D', 'F'}
	};

 
	// Given input array
	int input[] = { 1, 8, 5, 11 };

	// Size of the array
	int n = sizeof(input)/sizeof(input[0]);

	// Function call to find all combinations
	combinations(storedValue, input, string(""), 0, n );

	return 0;
}
